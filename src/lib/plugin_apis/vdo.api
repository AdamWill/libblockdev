#include <glib.h>
#include <glib-object.h>
#include <blockdev/utils.h>

#ifndef BD_VDO
#define BD_VDO

GQuark bd_vdo_error_quark (void) {
    return g_quark_from_static_string ("g-bd-vdo-error-quark");
}

GQuark bd_vdo_error_quark (void);
#define BD_VDO_ERROR bd_vdo_error_quark ()
typedef enum {
    BD_VDO_ERROR_FAIL,
} BDVDOError;

typedef enum {
    BD_VDO_TECH_VDO = 0,
} BDVDOTech;

typedef enum {
    BD_VDO_TECH_MODE_CREATE              = 1 << 0,
    BD_VDO_TECH_MODE_REMOVE              = 1 << 1,
    BD_VDO_TECH_MODE_ACTIVATE_DEACTIVATE = 1 << 2,
    BD_VDO_TECH_MODE_QUERY               = 1 << 3,
} BDVDOTechMode;


/**
 * bd_vdo_is_tech_avail:
 * @tech: the queried tech
 * @mode: a bit mask of queried modes of operation (#BDVDOTechMode) for @tech
 * @error: (out): place to store error (details about why the @tech-@mode combination is not available)
 *
 * Returns: whether the @tech-@mode combination is available -- supported by the
 *          plugin implementation and having all the runtime dependencies available
 */
gboolean bd_vdo_is_tech_avail (BDVDOTech tech, guint64 mode, GError **error);

#endif  /* BD_VDO_API */

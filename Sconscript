import os
import subprocess
from boilerplate_generator import generate_source_header

MAIN_VERSION = "1.0.0"
LIB_FILES = ["src/lib/blockdev.c", "src/lib/blockdev.h", "src/lib/plugins.h"]
PLUGIN_NAMES = ["crypto", "dm", "loop", "lvm", "mpath", "swap", "btrfs", "mdraid"]
PLUGIN_HEADER_FILES = ["build/plugin_apis/"+name+".h" for name in PLUGIN_NAMES]
UTILS_FILES = ["src/utils/exec.c", "src/utils/sizes.c", "src/utils/exec.h", "src/utils/sizes.h"]

glib_env = Environment(SHLIBVERSION=MAIN_VERSION)
glib_env.ParseConfig("pkg-config --cflags --libs glib-2.0")

glib_warnall_env = glib_env.Clone()
glib_warnall_env.Append(CFLAGS=["-Wall", "-Wextra", "-Werror"])

## the bd_utils library
bd_utils_env = glib_warnall_env.Clone()
bd_utils_env.SharedLibrary("bd_utils", ["src/utils/sizes.c", "src/utils/exec.c"])


## plugins
btrfs_env = glib_warnall_env.Clone()
btrfs_env.Append(CPPPATH="src/utils")
btrfs_env.Append(LIBPATH=".")
btrfs_env.Append(LIBS="bd_utils")
btrfs_env.SharedLibrary("bd_btrfs", ["src/plugins/btrfs.c"])

crypto_env = glib_warnall_env.Clone()
crypto_env.ParseConfig("pkg-config --cflags --libs libcryptsetup")
crypto_env.SharedLibrary("bd_crypto", ["src/plugins/crypto.c"])

dm_env = glib_warnall_env.Clone()
dm_env.ParseConfig("pkg-config --cflags --libs devmapper libudev")
dm_env.Append(CPPPATH="src/utils")
dm_env.Append(LIBPATH=".")
dm_env.Append(LIBS=["bd_utils", "dmraid"])
dm_env.SharedLibrary("bd_dm", ["src/plugins/dm.c"])

loop_env = glib_warnall_env.Clone()
loop_env.Append(CPPPATH="src/utils")
loop_env.Append(LIBPATH=".")
loop_env.Append(LIBS="bd_utils")
loop_env.SharedLibrary("bd_loop", ["src/plugins/loop.c"])

lvm_env = glib_warnall_env.Clone()
lvm_env.Append(CPPPATH="src/utils")
lvm_env.Append(LIBPATH=".")
lvm_env.Append(LIBS="bd_utils")
lvm_env.SharedLibrary("bd_lvm", ["src/plugins/lvm.c"])

mdraid_env = glib_warnall_env.Clone()
mdraid_env.Append(CPPPATH="src/utils")
mdraid_env.Append(LIBPATH=".")
mdraid_env.Append(LIBS="bd_utils")
mdraid_env.SharedLibrary("bd_mdraid", ["src/plugins/mdraid.c"])

mpath_env = glib_warnall_env.Clone()
mpath_env.Append(CPPPATH="src/utils")
mpath_env.Append(LIBPATH=".")
mpath_env.Append(LIBS="bd_utils")
mpath_env.SharedLibrary("bd_mpath", ["src/plugins/mpath.c"])

swap_env = glib_warnall_env.Clone()
swap_env.Append(CPPPATH="src/utils")
swap_env.Append(LIBPATH=".")
swap_env.Append(LIBS="bd_utils")
swap_env.SharedLibrary("bd_swap", ["src/plugins/swap.c"])


## boilerplate code generation
def generate_boilerplate_files(target, source, env):
    generate_source_header(str(source[0]), os.path.dirname(str(target[0])))
bpg_builder = Builder(action=generate_boilerplate_files)

boiler_code = []
bpg_env = Environment()
bpg_env.Append(BUILDERS={"BpG": bpg_builder})
boiler_code.append(bpg_env.BpG(["plugin_apis/btrfs.h", "plugin_apis/btrfs.c"], "src/lib/plugin_apis/btrfs.api"))
boiler_code.append(bpg_env.BpG(["plugin_apis/crypto.h", "plugin_apis/crypto.c"], "src/lib/plugin_apis/crypto.api"))
boiler_code.append(bpg_env.BpG(["plugin_apis/dm.h", "plugin_apis/dm.c"], "src/lib/plugin_apis/dm.api"))
boiler_code.append(bpg_env.BpG(["plugin_apis/lvm.h", "plugin_apis/lvm.c"], "src/lib/plugin_apis/lvm.api"))
boiler_code.append(bpg_env.BpG(["plugin_apis/loop.h", "plugin_apis/loop.c"], "src/lib/plugin_apis/loop.api"))
boiler_code.append(bpg_env.BpG(["plugin_apis/mdraid.h", "plugin_apis/mdraid.c"], "src/lib/plugin_apis/mdraid.api"))
boiler_code.append(bpg_env.BpG(["plugin_apis/mpath.h", "plugin_apis/mpath.c"], "src/lib/plugin_apis/mpath.api"))
boiler_code.append(bpg_env.BpG(["plugin_apis/swap.h", "plugin_apis/swap.c"], "src/lib/plugin_apis/swap.api"))


## the library itself
lib_env = glib_env.Clone()
lib_env.Append(CPPPATH="src/utils")
lib_env.Append(LIBPATH=".")
lib_env.Append(LIBS="bd_utils")
lib_env.Append(CPPPATH=".")
main_lib = lib_env.SharedLibrary("blockdev", ["src/lib/blockdev.c"])
for build in boiler_code:
    Depends(main_lib, boiler_code)


## GObject introspection data
def generate_gir_file(target, source, env):
    ld_lib_path = env.get('LD_LIBRARY_PATH', None)
    if not ld_lib_path:
        env['LD_LIBRARY_PATH'] = ""
    for lib_path in env['LIBPATH']:
        if lib_path not in env['LD_LIBRARY_PATH']:
            env['LD_LIBRARY_PATH'] += ":%s" % lib_path

    lib_name = env['LIB_NAME']
    ident_prefix = env['IDENTIFIER_PREFIX']
    symb_prefix = env['SYMBOL_PREFIX']
    namespace = env['NAMESPACE']
    ns_version = env['NS_VERSION']

    argv = ["g-ir-scanner", "--warn-error", "--warn-all"]
    for lib in env['LIBS']:
        argv.append("-l%s" % lib)
    for lib_path in env['LIBPATH']:
        argv.append("-L%s" % lib_path)
    for cpp_path in env['CPPPATH']:
        argv.append("-I%s" % cpp_path)
    argv.append("--library=%s" % lib_name)
    argv.append("--identifier-prefix=%s" % ident_prefix)
    argv.append("--symbol-prefix=%s" % symb_prefix)
    argv.append("--namespace=%s" % namespace)
    argv.append("--nsversion=%s" % ns_version)
    argv.append("-o%s" % target[0])
    argv += [str(src) for src in source]

    proc_env = os.environ.copy()
    proc_env["LD_LIBRARY_PATH"] = env['LD_LIBRARY_PATH']
    proc = subprocess.Popen(argv, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=proc_env)
    out, err = proc.communicate()

    if proc.returncode != 0:
        print out
        print err

    # 0 or None means OK, anything else means NOK
    return proc.returncode

gir_file_builder = Builder(action=generate_gir_file)

gi_env = glib_env.Clone()
gi_env.ParseConfig("pkg-config --cflags --libs devmapper libudev libcryptsetup gobject-2.0")
gi_env.Append(CPPPATH="src/utils")
gi_env.Append(LIBPATH=["build"])
gi_env.Append(LIBS=["bd_utils", "dmraid", "m"])
gi_env["LIB_NAME"] = "blockdev"
gi_env["IDENTIFIER_PREFIX"] = "BD"
gi_env["SYMBOL_PREFIX"] = "bd"
gi_env["NAMESPACE"] = "BlockDev"
gi_env["NS_VERSION"] = "1.0"
gi_env.Append(BUILDERS={"Gir": gir_file_builder})
gir_file = gi_env.Gir(["BlockDev-1.0.gir"], LIB_FILES + PLUGIN_HEADER_FILES + UTILS_FILES)
Depends(gir_file, main_lib)

typelib_env = Environment()
typelib_env.Command("BlockDev-1.0.typelib", "BlockDev-1.0.gir", "g-ir-compiler -o $TARGET $SOURCE")


## compiled tests
tests_env = glib_env.Clone()
tests_env.Append(CPPPATH=["src/utils", "build/plugin_apis"])
tests_env.Append(LIBS=["m"])
for pname in ("btrfs", "swap", "lvm", "loop"):
    tests_env.Program("test_%s" % pname, ["src/utils/exec.c", "src/utils/sizes.c", "src/plugins/test_%s.c" % pname])
tests_env.Program("test_sizes", ["src/utils/test_sizes.c"])
